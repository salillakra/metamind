generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model userCredential {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  UserId    String   @unique @db.ObjectId
  User      User?    @relation(fields: [UserId], references: [id])

  @@map("user_credentials")
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  username       String          @unique
  email          String          @unique
  firstName      String?
  lastName       String?
  posts          Post[]
  gender         String?
  bio            String?
  imageURL       String?
  isAdmin        Boolean         @default(false)
  role           String?         @default("user")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  Comment        Comment[]
  userCredential userCredential?
  CommentReply   CommentReply[]
}

model Post {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  author      User        @relation(fields: [authorId], references: [id])
  authorId    String      @db.ObjectId
  tags        String[]
  description String
  isFeatured  Boolean     @default(false)
  isPublished Boolean     @default(false)
  category    String?
  imageURL    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Comment     Comment[]
  PostStats   PostStats[]

  @@index([authorId])
}

model Comment {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  content      String
  post         Post           @relation(fields: [postId], references: [id])
  postId       String         @db.ObjectId
  author       User?          @relation(fields: [authorId], references: [id])
  authorId     String?        @db.ObjectId
  likes        Int            @default(0)
  dislikes     Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  CommentReply CommentReply[]

  @@index([postId])
}

model CommentReply {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  comment   Comment  @relation(fields: [commentId], references: [id])
  likes     Int      @default(0)
  dislikes  Int      @default(0)
  commentId String   @db.ObjectId
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([commentId])
}

model PostStats {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  views     Int      @default(0)
  likes     Int      @default(0)
  dislikes  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@map("post_stats")
}
